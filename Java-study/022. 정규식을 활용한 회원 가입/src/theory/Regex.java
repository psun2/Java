package theory;

import java.util.Arrays;
import java.util.regex.Pattern;

public class Regex {

	public static void main(String[] args) {

		String name = "정우성asdaf123";

		System.out.println(name.startsWith("정")); // true
		System.out.println(name == "정"); // false
		System.out.println(name.contains("우")); // true
		System.out.println(name.contains("우성")); // true
		System.out.println(name.contains("123")); // true

		System.out.println("-----------------------------");

		boolean chk = true;
		for (char ch : name.toCharArray()) {
			chk = "1234567890".contains(ch + "");
			System.out.println(ch + " : " + chk);
			if (!chk)
				break;
		}

		char[] nameElement = name.toCharArray();
		System.out.println(Arrays.toString(nameElement));
		// [정, 우, 성, a, s, d, a, f, 1, 2, 3]

		System.out.println("-----------------------------");

		String[] mmArr = { "장동건", "건", "장서건", "장혁", "장남건", "장", "장군", "최장군", "박장군", "장군님", "장장장", "김앤장이다", "현빈", "원빈",
				"미스터빈", "커피빈", "커피", "원두커피", "장희빈", "ㄱㄴㄷ", "ㄱㄹㄴ", "ㅐㅓㅣㅔㅐ", "ㅐㅔㅓㅐㅑㅓ", "ㄱㅓㅔㅔㅔㄹㄴ", "하하하", "하호허", "팉툍하",
				"하학", "하햐", "가긱공국", "짱쩡맨", "쑥ㄴ밬", "샹쏑쑗", "다", "공석호", "김희애", "나야비", "나비야", "농ㅂ왕창", "장ㄴ비용솽", "너탈비털아붕니",
				"너비아니", "헤르너비아샹쵕", "123-456", "1234-5678", "1234-5678-9012", "123-5678-9012", "12-5678-9012",
				"12-568-9012", "123-678-9012", "123-567833-9012", "12-58-9012", "1a", "abc", "abc_def", "1234", "9846",
				"ab_1234", "ab1234", "aaa@aaa.aaa", "aaaaaa.aaa@", "aaa12aaa_aaa@", "ab56", "AABB", "aBCd", "1", "3",
				"1234abc@aaa.aaa", "1234abc@aaa.a", "1a2b", "a12", "^", "^^", "12^34abc@aaa.aaa", "1a2b^", "^a12",
				"123456.^", "123^", "^321", "\\^", "^\\^", ".^", "\\^^", "1234abc@aaa.aa.va", "1234abc@a.aa.a.a.va" };

		String[] ppArr = { //
				"장", // 장이랑 정확히 일치하는 요소 를 추려냅니다.
				"장*", // 장이랑 정확히 일치하되, 장의 갯수는 중요하지 않습니다.
				"장.*", // 장으로 시작하는 모든 단어를 get 합니다.
				// .(점, dot) => 임의의 문자, *(별) => 글자수와 관계가 있습니다. || 있을수도 없을 수 도 있습니다.
				".*빈", // 빈으로 끝나는 모든 문자열을 get 합니다.
				".장.", // 가운데가 장인 문자열을 get 합니다.
				".*장.*", // 장의 앞뒤로 임의의 문자가 있고 그 문자열들의 갯수는 신경 쓰지 않고 장이 있으면 get 합니다.
				".*빈건", // 빈건으로 단어 또는 빈건으로 끝나는 단어 를 get 합니다.
				".*(빈건)", // 빈건으로 단어 또는 빈건으로 끝나는 단어 를 get 합니다.
				".*(빈|건)", // 빈 또는 건 의 단어를 가져오거나 빈 또는 건 으로 끝나는 단어를 get 합니다.
				".*빈|.*건", ".*[빈건]", // .*(빈|건)" 과 같은 결과를 get 합니다.
				".*(장군|커피)", // 장군 또는 커피 문자를 get 하거나 장군 또는 커피 로 끝나는 문자열을 get 합니다.
				".*[장군|커피]", // 장, 군, 커, 피 가 따로 따로 비교하여 문자열을 get 합니다.
				"\\d", // 숫자로 시작하는 문자열의 일의 자리인 숫자형 문자열만 get 합니다.
				"\\d*", // 숫자로 시작하는 문자열의 자릿수에 상관없이 숫자형 문자열을 get 합니다.
				"[0-9]", // \\d 와 같은 결과 숫자로 시작하는 문자열의 한자리 수의 숫자형 문자열을 get 합니다.
				"[0-9]*", // \\d* 와 같은 결과 숫자로 시작하는 문자열의 자릿수 상관없이 숫자형 문자열이라면 get 합니다.
				"[a-z]*", // 소문자로 시작하는 문자열의 a 부터 z 까지 자릿수와 상관없이 소문자를 get 합니다.
				"[A-Z]*", // 대문자로 시작하는 문자열의 A 부터 Z 까지 자릿수와 상관없이 대문자를 get 합니다.
				"[a-zA-Z]*", // 대 소문자 구분없이 알파벳으로 시작하는 문자열을 get 합니다.
				"[a-zA-Z0-9]*", // 대 소문자 숫자 구분없이 알파벳이나 숫자로 시작하는 문자열을 get 합니다.
				"[a-zA-Z0-9._*@-]*", // 소문자, 대문자, 숫자, 특수문자
				"[a-zA-Z0-9]*@[a-zA-Z0-9.]*", // 이메일
				"[a-zA-Z0-9]*@[a-zA-Z0-9]*.[a-zA-Z0-9]*", // 이메일
				"[a-zA-Z0-9._*@-]{4}", // 글자의 제한 4글자인것들
				"[a-zA-Z0-9._*@-]{2,7}", // 글자의 제한 2글자 ~ 7글자
				"[a-zA-Z0-9._*@-]{2,}", // 글자의 제한 2글자 이상
//				"[a-zA-Z0-9._*@-]{,7}", // 문법 Error
				"[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}", // 전화번호
				"[^0-9]*", // 숫자로 시작하지 않는 문자열을 get 합니다.
				"[0-9^]*", // ^것이 뒤에 있을때는 숫자와 ^ 있는 것들만 get 합니다.
				"^*", // 문법 Error은 아닌데 모든것이 아닌것을 찾게 됨
				"\\^*", // ^ 을 찾는법
				"[^^]*", // ^ 이 아닌것 63번 line 참조
				"[ㄱ-ㅎ]*", // 자음만
				"[ㅏ-ㅣ]*", // 모음만
				"[가-힣]*", // 한글만
				"[ㄱ-ㅎㅏ-ㅣ가-힣]*", // 자음, 모음, 한글
				"[가-깋]*", // ㄱ으로 되어있는 글씨
				".*[나-닣ㄴ][바-빟ㅂ][아-잏ㅇ].*", // 초성검색
				".*[나-닣ㄴ바-빟ㅂ아-잏ㅇ].*", // 초성검색 이 아님 ㄴ, ㅂ, ㅇ 이 들어가는 모든 문자열을 get 합니다.
		};

//		.*[나-닣ㄴ][바-빟ㅂ][아-잏ㅇ].*:나비야, 농ㅂ왕창, 장ㄴ비용솽, 너비아니, 헤르너비아샹쵕, 
//		.*[나-닣ㄴ바-빟ㅂ아-잏ㅇ].*:장남건, 박장군, 장군님, 김앤장이다, 현빈, 원빈, 미스터빈, 커피빈, 원두커피, 장희빈, ㄱㄴㄷ, ㄱㄹㄴ, ㄱㅓㅔㅔㅔㄹㄴ, 쑥ㄴ밬, 김희애, 나야비, 나비야, 농ㅂ왕창, 장ㄴ비용솽, 너탈비털아붕니, 너비아니, 헤르너비아샹쵕,

		for (String pp : ppArr) {
			System.out.print(pp + ":");
			for (String mm : mmArr) {
				if (Pattern.matches(pp, mm))
					System.out.print(mm + ", ");
			}
			System.out.println();
		}


	}

}
